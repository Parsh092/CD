#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STACK_SIZE 100

// Structure for Stack
typedef struct {
    int stack[MAX_STACK_SIZE];
    int top;
} Stack;

// Initialize Stack
void initStack(Stack* s) {
    s->top = -1;
}

// Push an element to Stack
void push(Stack* s, int item) {
    if (s->top >= MAX_STACK_SIZE - 1) {
        printf("Stack Overflow\n");
        exit(EXIT_FAILURE);
    }
    s->stack[++s->top] = item;
}

// Pop an element from Stack
int pop(Stack* s) {
    if (s->top < 0) {
        printf("Stack Underflow\n");
        exit(EXIT_FAILURE);
    }
    return s->stack[s->top--];
}

// Get the next token from input
char getNextToken(const char* input, int* index) {
    return input[(*index)++];
}

// SLR Parser
bool slrParser(const char* input) {
    Stack stack;
    initStack(&stack);

  int parsingTable[6][3] = {
    { -1, 1, -1 },
    { -1, -1, -1 },
    { -1, 3, -1 },
    { -1, -1, 4 },
    { -1, 5, -1 },
    { -1, -1, -1 }
};

    int i = 0;
    int currentState = 0;
    int action;

    while (true) {
        char currentToken = getNextToken(input, &i);

        if (currentToken == '\0')
            break;

        action = parsingTable[currentState][currentToken - 'a'];

        if (action == -1) {
            printf("Parsing Error\n");
            return false;
        }

        if (action < 10) {
            push(&stack, action);
            printf("Shift %d\n", action);
            currentState = action;
        } else {
            int production = action - 10;
            printf("Reduce by %d\n", production);

            for (int j = 0; j < 2; j++) {
                pop(&stack);
            }

            int nextState = parsingTable[stack.stack[stack.top]][production];
            push(&stack, nextState);
            printf("Goto %d\n", nextState);
        }
    }

    if (stack.top == 0 && stack.stack[stack.top] == 4) {
        printf("Parsing Successful\n");
        return true;
    } else {
        printf("Parsing Error\n");
        return false;
    }
}

int main() {
    const char* input = "abab";

    if (slrParser(input)) {
        printf("Input is valid\n");
    } else {
        printf("Input is invalid\n");
    }

    return 0;
}

/*
Ouput 1:

Shift 1
Shift 2
Reduce by 0
Goto 1
Shift 3
Shift 4
Parsing Successful
Input is valid

Output for string "ab"
Parsing Error
Input is invalid
*/

