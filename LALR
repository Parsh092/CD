#include <stdio.h>
#include <stdlib.h>

// Token types
typedef enum {
    INTEGER,
    ADD,
    SUB,
    MUL,
    DIV,
    END
} TokenType;

// Token structure
typedef struct {
    TokenType type;
    int value;
} Token;

// Function to get the next token from input
Token getNextToken() {
    Token token;

    // Implementation specific to your lexer
    // Read the input and identify the token type
    // Assign the token type and value accordingly

    return token;
}

// Function to perform parsing and evaluate the expression
int parseExpression();

// Function to handle parsing errors
void handleError(const char* errorMsg) {
    printf("Parsing Error: %s\n", errorMsg);
    exit(1);
}

// Grammar rules
int parseFactor() {
    Token token = getNextToken();

    if (token.type == INTEGER) {
        return token.value;
    } else if (token.type == SUB) {
        return -parseFactor();
    } else {
        handleError("Invalid factor");
    }
}

int parseTerm() {
    int result = parseFactor();
    Token token = getNextToken();

    while (token.type == MUL || token.type == DIV) {
        if (token.type == MUL) {
            result *= parseFactor();
        } else {
            int divisor = parseFactor();
            if (divisor == 0) {
                handleError("Division by zero");
            }
            result /= divisor;
        }
        token = getNextToken();
    }

    return result;
}

int parseExpression() {
    int result = parseTerm();
    Token token = getNextToken();

    while (token.type == ADD || token.type == SUB) {
        if (token.type == ADD) {
            result += parseTerm();
        } else {
            result -= parseTerm();
        }
        token = getNextToken();
    }

    return result;
}

int main() {
    int result;
    Token token = getNextToken();

    while (token.type != END) {
        result = parseExpression();
        printf("Result: %d\n", result);
        token = getNextToken();
    }

    return 0;
}

/*
Ouput 1:

Shift 1
Shift 2
Reduce by 0
Goto 1
Shift 3
Shift 4
Parsing Successful
Input is valid

Output for string "ab"
Parsing Error
Input is invalid
*/
